plugins {
    id 'groovy'
    id 'java-gradle-plugin'
}

repositories {
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    compileOnly 'org.jetbrains:annotations:19.0.0'

    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

gradlePlugin {
    plugins {
        graalvmNativeImage {
            id = 'org.mikeneck.savanna-gradle-plugin'
            implementationClass = 'org.mikeneck.savanna.SavannaPlugin'
        }
    }
}

def counts = objects.listProperty(String)

test {
    useJUnitPlatform()

    testLogging {
        afterTest { TestDescriptor desc, TestResult result ->
            counts.add("${desc.className} ${desc.displayName} ${result.testCount} (success: ${result.successfulTestCount}/fail: ${result.failedTestCount})")
        }
    }
    finalizedBy('savana')
}

task savana(dependsOn: test) {
    doLast {
        def s = counts.get().size()
        if (s == 0) {
            logger.lifecycle('show サバンナ')
        }
    }
}

[tasks.check, tasks.build]*.finalizedBy('savana')
