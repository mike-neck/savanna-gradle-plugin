plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.kapt' version "1.3.72"
}

repositories {
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    compileOnly 'org.jetbrains:annotations:19.0.0'

    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    testImplementation platform('org.jetbrains.kotlin:kotlin-bom')
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation 'run.ktcheck:ktcheck:v0.1.0'
}

gradlePlugin {
    plugins {
        graalvmNativeImage {
            id = 'org.mikeneck.savanna-gradle-plugin'
            implementationClass = 'org.mikeneck.savanna.SavannaPlugin'
        }
    }
}

def counts = objects.listProperty(String)

test {
    useJUnitPlatform()

    testLogging {
        afterTest { TestDescriptor desc, TestResult result ->
            counts.add("${desc.className} ${desc.displayName} ${result.testCount} (success: ${result.successfulTestCount}/fail: ${result.failedTestCount})")
        }
    }
    finalizedBy('savana')
}

task savana(dependsOn: test) {
    doLast {
        def executedTests = counts.get()
        def executedTestsIs0 = executedTests.empty

        def testTaskState = test.state
        def testIsExecuted = testTaskState.executed
        def testIsSkipped = testTaskState.skipped
        def testIsNoSource = testTaskState.noSource
        def lionWillCome = 
                executedTestsIs0 || 
                (testIsExecuted && (testIsSkipped || testIsNoSource))
        logger.info(
                'test executed: {}(count: {}, skipped: {}, no-source: {}) ... thus lion {}',
                testIsExecuted,
                counts.get().size(),
                testIsSkipped,
                testIsNoSource,
                lionWillCome? 'comes': 'never comes',
        )
        if (lionWillCome) {
            logger.lifecycle('show サバンナ')
        }
    }
}

[tasks.check, tasks.build]*.finalizedBy('savana')
